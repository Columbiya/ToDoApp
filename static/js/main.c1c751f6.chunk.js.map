{"version":3,"sources":["helpers/id-generator.js","reducers/todolist-reducer.js","Components/common/FormElements.jsx","Components/AddToDo/AddToDo.jsx","Components/Task/Task.jsx","Components/ToDoList/ToDoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["generator","id","idGenerator","TOGGLE_TASK","ADD_TO_DO","DELETE_TASK","todolistReducer","state","action","type","tasks","map","task","done","filter","Input","styled","input","props","Button","button","AddToDoStyled","className","dispatch","wrapperRef","useState","text","setText","error","setError","onAddToDo","e","a","newTask","next","value","current","scrollTop","scrollHeight","Paragraph","onChange","target","onKeyDown","keyCode","placeholder","onClick","p","fadeIn","keyframes","Container","div","Task","tagName","toggleTask","checked","deleteTask","initialValue","Wrapper","section","Title","h1","ToDoList","useReducer","doneTasks","doneTask","notDoneTasks","notDoneTask","wrapper","useRef","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1c751f6.chunk.js","sourcesContent":["function* generator() {\r\n    let id = 0;\r\n    while(true) {\r\n        id++;\r\n        yield id;\r\n    }\r\n}\r\n\r\nexport const idGenerator = generator();\r\n\r\nexport default generator;","const TOGGLE_TASK = 'todolist/TOGGLE_TASK';\r\nconst ADD_TO_DO = 'todolist/ADD_TO_DO';\r\nconst DELETE_TASK = 'todolist/DELETE_TASK';\r\n\r\nconst todolistReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case TOGGLE_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => {\r\n                    if (task.id === action.id) return {...task, done: !task.done}\r\n                    return {...task};\r\n                })\r\n            }\r\n        case ADD_TO_DO:\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks, action.task]\r\n            }\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(task => task.id !== action.id)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const toggleTask = id => ({type: TOGGLE_TASK, id});\r\nexport const addToDo = task => ({type: ADD_TO_DO, task});\r\nexport const deleteTask = id => ({type: DELETE_TASK, id})\r\n\r\nexport default todolistReducer;","import styled from 'styled-components';\r\n\r\nexport const Input = styled.input`\r\n    border: 2px solid #ccc;\r\n    max-height: 30px;\r\n    ${props => props.type === 'text' ? `\r\n    max-width: 400px;\r\n    min-width: 300px;\r\n    padding: 15px;`: null}\r\n\r\n    &:focus {\r\n        border: 2px solid #000;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    border: 2px solid #000;\r\n    border-radius: 15px;\r\n\r\n    transition: background-color .3s ease,\r\n                color .3s ease;\r\n\r\n    &:hover {\r\n        background-color: #000;\r\n        color: #fff;\r\n    }\r\n`;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { idGenerator } from '../../helpers/id-generator';\r\nimport { addToDo } from '../../reducers/todolist-reducer';\r\nimport { Button, Input } from '../common/FormElements';\r\n\r\nconst AddToDo = ( { className, dispatch, wrapperRef }) => {\r\n    let [text, setText] = useState('');\r\n    let [error, setError] = useState(null);\r\n\r\n    const onInputChange = e => {\r\n        setError(null);\r\n        setText(e.target.value)\r\n    };\r\n\r\n    const checkKeys = e => {\r\n        if (e.keyCode === 13) onAddToDo();\r\n    }\r\n\r\n    const onAddToDo = async e => {\r\n        if (!text) {\r\n            setError('ToDo не может быть пустым!');\r\n            return;\r\n        }\r\n\r\n        let newTask = {\r\n            text,\r\n            id: idGenerator.next().value,\r\n            done: false\r\n        };\r\n        await dispatch(addToDo(newTask));\r\n\r\n        wrapperRef.current.scrollTop = wrapperRef.current.scrollHeight;\r\n\r\n        setText('');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {error && <Paragraph>{error}</Paragraph>}\r\n\r\n            <div className={className}>\r\n                <Input type={'text'} value={text} onChange={onInputChange} onKeyDown={checkKeys} placeholder={'Вводите ваш ToDo here...'} />\r\n                <Button onClick={onAddToDo}>Добавить To Do</Button>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\nconst AddToDoStyled = styled(AddToDo)`\r\n    margin: 0 auto;\r\n    padding: 15px 15px;\r\n\r\n    border-bottom: 1px solid #000;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    @media screen and (max-width: 515px) {\r\n        & {\r\n            flex-direction: column;\r\n        }\r\n\r\n        & button {\r\n            margin-top: 10px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Paragraph = styled.p`\r\n    margin-top: 15px;\r\n    text-align: center;\r\n    color: red;\r\n`;\r\n\r\nexport default AddToDoStyled;","import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { deleteTask, toggleTask } from '../../reducers/todolist-reducer';\r\nimport { Button, Input } from '../common/FormElements';\r\n\r\nconst Task = ({ done, id, text, dispatch }) => {\r\n    const onToggleTask = e => {\r\n        if (e.target.tagName === 'BUTTON') return;\r\n\r\n        dispatch(toggleTask(id));\r\n    };\r\n\r\n    const onDeleteTask = e => {\r\n        dispatch(deleteTask(id));\r\n    };\r\n\r\n    return (\r\n        <Container onClick={onToggleTask}>\r\n            <Input type={'checkbox'} checked={done} />\r\n            <Paragraph>{text}</Paragraph>\r\n            <Button onClick={onDeleteTask}>&#10008;</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst fadeIn = keyframes`\r\n    from {\r\n        opacity: 0;\r\n    }\r\n\r\n    to {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\nconst Container = styled.div`\r\n    padding: 30px;\r\n    font-size: 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    animation: ${fadeIn} 1s ease-in-out 1;\r\n\r\n    cursor: pointer;\r\n\r\n    transition: background-color .3s ease;\r\n\r\n    &:not(:last-child) {\r\n        border-bottom: 1px solid #000;\r\n    }\r\n\r\n    &:hover {\r\n        background-color: rgba(0, 0, 0, .5);\r\n    }\r\n`;\r\n\r\nconst Paragraph = styled.p`\r\n    display: inline;\r\n    margin-left: 15px;\r\n`;\r\n\r\nexport default Task;","import React, { useReducer, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { idGenerator } from '../../helpers/id-generator';\r\nimport todolistReducer from '../../reducers/todolist-reducer';\r\nimport AddToDoStyled from '../AddToDo/AddToDo';\r\nimport Task from '../Task/Task';\r\n\r\nconst initialValue = {\r\n    tasks: []\r\n}\r\n\r\nconst ToDoList = props => {\r\n    let [state, dispatch] = useReducer(todolistReducer, initialValue);\r\n    const doneTasks = state.tasks.filter(task => task.done).map(doneTask => <Task done={true} \r\n                                                                                  text={doneTask.text} \r\n                                                                                  key={doneTask.id} \r\n                                                                                  id={doneTask.id}\r\n                                                                                  dispatch={dispatch} />);\r\n    const notDoneTasks = state.tasks.filter(task => !task.done).map(notDoneTask => <Task done={false} \r\n                                                                                         text={notDoneTask.text}\r\n                                                                                         key={notDoneTask.id} \r\n                                                                                         id={notDoneTask.id}\r\n                                                                                         dispatch={dispatch} />);\r\n\r\n    const wrapper = useRef(null);\r\n    return (\r\n        <Wrapper ref={wrapper}>\r\n            <Title>To Do List</Title>\r\n            <AddToDoStyled dispatch={dispatch} wrapperRef={wrapper} />\r\n            {doneTasks}\r\n            {notDoneTasks}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nconst Wrapper = styled.section`\r\n    width: 100%;\r\n    max-width: 500px;\r\n    height: 80vh;\r\n    overflow-y: auto;\r\n    margin: 50px auto 0;\r\n    background-color: #fff;\r\n    border: 2px solid #000;\r\n    border-radius: 50px;\r\n\r\n    box-shadow: 20px 20px 25px rgba(0, 0, 0, 0.6);\r\n\r\n    &::-webkit-scrollbar {\r\n        width: 5px;\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n        background-color: #ccc;\r\n        border-radius: 30px;\r\n    }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    font-size: 50px;\r\n    text-align: center;\r\n    border-bottom: 1px solid #000;\r\n`;\r\n\r\nexport default ToDoList;","import './App.css';\nimport ToDoList from './Components/ToDoList/ToDoList';\n\nconst App = props => {\n  return (\n    <>\n      <ToDoList />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}